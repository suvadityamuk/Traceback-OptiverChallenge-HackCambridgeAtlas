{"filter":false,"title":"hacking-out.py","tooltip":"/hacking-out.py","undoManager":{"mark":56,"position":56,"stack":[[{"start":{"row":64,"column":65},"end":{"row":65,"column":0},"action":"insert","lines":["",""],"id":106},{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"remove","lines":["    "],"id":107}],[{"start":{"row":65,"column":0},"end":{"row":66,"column":0},"action":"insert","lines":["",""],"id":108},{"start":{"row":66,"column":0},"end":{"row":66,"column":1},"action":"insert","lines":["s"]},{"start":{"row":66,"column":1},"end":{"row":66,"column":2},"action":"insert","lines":["e"]},{"start":{"row":66,"column":2},"end":{"row":66,"column":3},"action":"insert","lines":["l"]},{"start":{"row":66,"column":3},"end":{"row":66,"column":4},"action":"insert","lines":["l"]},{"start":{"row":66,"column":4},"end":{"row":66,"column":5},"action":"insert","lines":["_"]}],[{"start":{"row":66,"column":5},"end":{"row":66,"column":6},"action":"insert","lines":["a"],"id":109}],[{"start":{"row":66,"column":6},"end":{"row":66,"column":8},"action":"insert","lines":["[]"],"id":110}],[{"start":{"row":66,"column":7},"end":{"row":66,"column":8},"action":"insert","lines":["4"],"id":111}],[{"start":{"row":66,"column":9},"end":{"row":67,"column":0},"action":"insert","lines":["",""],"id":112}],[{"start":{"row":67,"column":0},"end":{"row":69,"column":65},"action":"insert","lines":["order = ex.get_trade_history(phil_a)","for i in order:","    print(f\"{i.order_id} \\t {i.price} \\t {i.volume} \\t {i.side}\")"],"id":113}],[{"start":{"row":66,"column":8},"end":{"row":66,"column":9},"action":"remove","lines":["]"],"id":114},{"start":{"row":66,"column":7},"end":{"row":66,"column":8},"action":"remove","lines":["4"]},{"start":{"row":66,"column":6},"end":{"row":66,"column":7},"action":"remove","lines":["["]}],[{"start":{"row":66,"column":6},"end":{"row":66,"column":8},"action":"insert","lines":["()"],"id":115}],[{"start":{"row":66,"column":7},"end":{"row":66,"column":8},"action":"insert","lines":["4"],"id":116}],[{"start":{"row":70,"column":0},"end":{"row":71,"column":0},"action":"insert","lines":["",""],"id":117},{"start":{"row":71,"column":0},"end":{"row":71,"column":1},"action":"insert","lines":["e"]},{"start":{"row":71,"column":1},"end":{"row":71,"column":2},"action":"insert","lines":["x"]},{"start":{"row":71,"column":2},"end":{"row":71,"column":3},"action":"insert","lines":["."]},{"start":{"row":71,"column":3},"end":{"row":71,"column":4},"action":"insert","lines":["g"]},{"start":{"row":71,"column":4},"end":{"row":71,"column":5},"action":"insert","lines":["e"]}],[{"start":{"row":71,"column":5},"end":{"row":71,"column":6},"action":"insert","lines":["t"],"id":118},{"start":{"row":71,"column":6},"end":{"row":71,"column":7},"action":"insert","lines":["_"]},{"start":{"row":71,"column":7},"end":{"row":71,"column":8},"action":"insert","lines":["p"]},{"start":{"row":71,"column":8},"end":{"row":71,"column":9},"action":"insert","lines":["n"]},{"start":{"row":71,"column":9},"end":{"row":71,"column":10},"action":"insert","lines":["l"]}],[{"start":{"row":71,"column":10},"end":{"row":71,"column":12},"action":"insert","lines":["()"],"id":119}],[{"start":{"row":71,"column":11},"end":{"row":71,"column":12},"action":"insert","lines":["p"],"id":120},{"start":{"row":71,"column":12},"end":{"row":71,"column":13},"action":"insert","lines":["j"]}],[{"start":{"row":71,"column":12},"end":{"row":71,"column":13},"action":"remove","lines":["j"],"id":121}],[{"start":{"row":71,"column":12},"end":{"row":71,"column":13},"action":"insert","lines":["h"],"id":122},{"start":{"row":71,"column":13},"end":{"row":71,"column":14},"action":"insert","lines":["i"]},{"start":{"row":71,"column":14},"end":{"row":71,"column":15},"action":"insert","lines":["l"]},{"start":{"row":71,"column":15},"end":{"row":71,"column":16},"action":"insert","lines":["_"]},{"start":{"row":71,"column":16},"end":{"row":71,"column":17},"action":"insert","lines":["a"]}],[{"start":{"row":71,"column":0},"end":{"row":71,"column":1},"action":"insert","lines":["p"],"id":123},{"start":{"row":71,"column":1},"end":{"row":71,"column":2},"action":"insert","lines":["n"]},{"start":{"row":71,"column":2},"end":{"row":71,"column":3},"action":"insert","lines":["l"]}],[{"start":{"row":71,"column":3},"end":{"row":71,"column":4},"action":"insert","lines":[" "],"id":124},{"start":{"row":71,"column":4},"end":{"row":71,"column":5},"action":"insert","lines":["="]}],[{"start":{"row":71,"column":5},"end":{"row":71,"column":6},"action":"insert","lines":[" "],"id":125}],[{"start":{"row":72,"column":0},"end":{"row":72,"column":27},"action":"insert","lines":[" print(f'\\nPnL: {pnl:.2f}')"],"id":126}],[{"start":{"row":72,"column":0},"end":{"row":72,"column":1},"action":"remove","lines":[" "],"id":127}],[{"start":{"row":71,"column":17},"end":{"row":71,"column":23},"action":"remove","lines":["phil_a"],"id":128}],[{"start":{"row":72,"column":26},"end":{"row":73,"column":0},"action":"insert","lines":["",""],"id":129},{"start":{"row":73,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["",""]},{"start":{"row":74,"column":0},"end":{"row":74,"column":1},"action":"insert","lines":["i"]},{"start":{"row":74,"column":1},"end":{"row":74,"column":2},"action":"insert","lines":["f"]}],[{"start":{"row":74,"column":2},"end":{"row":74,"column":3},"action":"insert","lines":[" "],"id":130},{"start":{"row":74,"column":3},"end":{"row":74,"column":4},"action":"insert","lines":["p"]},{"start":{"row":74,"column":4},"end":{"row":74,"column":5},"action":"insert","lines":["n"]},{"start":{"row":74,"column":5},"end":{"row":74,"column":6},"action":"insert","lines":["l"]}],[{"start":{"row":74,"column":6},"end":{"row":74,"column":7},"action":"insert","lines":[" "],"id":131},{"start":{"row":74,"column":7},"end":{"row":74,"column":8},"action":"insert","lines":[">"]}],[{"start":{"row":74,"column":8},"end":{"row":74,"column":9},"action":"insert","lines":[" "],"id":132},{"start":{"row":74,"column":9},"end":{"row":74,"column":10},"action":"insert","lines":["0"]},{"start":{"row":74,"column":10},"end":{"row":74,"column":11},"action":"insert","lines":[":"]}],[{"start":{"row":74,"column":11},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":133},{"start":{"row":75,"column":0},"end":{"row":75,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":75,"column":4},"end":{"row":76,"column":0},"action":"insert","lines":["",""],"id":134},{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"remove","lines":["    "],"id":135}],[{"start":{"row":76,"column":0},"end":{"row":76,"column":1},"action":"insert","lines":["e"],"id":136},{"start":{"row":76,"column":1},"end":{"row":76,"column":2},"action":"insert","lines":["l"]},{"start":{"row":76,"column":2},"end":{"row":76,"column":3},"action":"insert","lines":["i"]}],[{"start":{"row":76,"column":2},"end":{"row":76,"column":3},"action":"remove","lines":["i"],"id":137}],[{"start":{"row":76,"column":2},"end":{"row":76,"column":3},"action":"insert","lines":["s"],"id":138},{"start":{"row":76,"column":3},"end":{"row":76,"column":4},"action":"insert","lines":["e"]},{"start":{"row":76,"column":4},"end":{"row":76,"column":5},"action":"insert","lines":[":"]}],[{"start":{"row":76,"column":5},"end":{"row":77,"column":0},"action":"insert","lines":["",""],"id":139},{"start":{"row":77,"column":0},"end":{"row":77,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":77,"column":4},"end":{"row":77,"column":5},"action":"insert","lines":["c"],"id":140},{"start":{"row":77,"column":5},"end":{"row":77,"column":6},"action":"insert","lines":["o"]},{"start":{"row":77,"column":6},"end":{"row":77,"column":7},"action":"insert","lines":["n"]},{"start":{"row":77,"column":7},"end":{"row":77,"column":8},"action":"insert","lines":["t"]},{"start":{"row":77,"column":8},"end":{"row":77,"column":9},"action":"insert","lines":["i"]}],[{"start":{"row":77,"column":4},"end":{"row":77,"column":9},"action":"remove","lines":["conti"],"id":141},{"start":{"row":77,"column":4},"end":{"row":77,"column":12},"action":"insert","lines":["continue"]}],[{"start":{"row":74,"column":11},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":142},{"start":{"row":75,"column":0},"end":{"row":75,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"remove","lines":["    "],"id":143},{"start":{"row":75,"column":4},"end":{"row":76,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":75,"column":4},"end":{"row":75,"column":5},"action":"insert","lines":["b"],"id":144},{"start":{"row":75,"column":5},"end":{"row":75,"column":6},"action":"insert","lines":["u"]},{"start":{"row":75,"column":6},"end":{"row":75,"column":7},"action":"insert","lines":["y"]}],[{"start":{"row":75,"column":4},"end":{"row":75,"column":7},"action":"remove","lines":["buy"],"id":145},{"start":{"row":75,"column":4},"end":{"row":75,"column":11},"action":"insert","lines":["buy_a()"]}],[{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"insert","lines":["s"],"id":146},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"insert","lines":["u"]},{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"insert","lines":["z"]}],[{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"remove","lines":["z"],"id":147},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"remove","lines":["u"]},{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"remove","lines":["s"]}],[{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"insert","lines":["v"],"id":148}],[{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"remove","lines":["v"],"id":149}],[{"start":{"row":75,"column":10},"end":{"row":75,"column":11},"action":"insert","lines":["u"],"id":150},{"start":{"row":75,"column":11},"end":{"row":75,"column":12},"action":"insert","lines":["n"]},{"start":{"row":75,"column":12},"end":{"row":75,"column":13},"action":"insert","lines":["i"]},{"start":{"row":75,"column":13},"end":{"row":75,"column":14},"action":"insert","lines":["t"]},{"start":{"row":75,"column":14},"end":{"row":75,"column":15},"action":"insert","lines":["s"]}],[{"start":{"row":75,"column":16},"end":{"row":76,"column":0},"action":"insert","lines":["",""],"id":151},{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":75,"column":0},"end":{"row":75,"column":16},"action":"remove","lines":["    buy_a(units)"],"id":152}],[{"start":{"row":75,"column":0},"end":{"row":76,"column":4},"action":"remove","lines":["","    "],"id":153},{"start":{"row":74,"column":11},"end":{"row":75,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":74,"column":11},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":154},{"start":{"row":75,"column":0},"end":{"row":75,"column":4},"action":"insert","lines":["    "]},{"start":{"row":75,"column":4},"end":{"row":75,"column":5},"action":"insert","lines":["p"]},{"start":{"row":75,"column":5},"end":{"row":75,"column":6},"action":"insert","lines":["a"]},{"start":{"row":75,"column":6},"end":{"row":75,"column":7},"action":"insert","lines":["s"]},{"start":{"row":75,"column":7},"end":{"row":75,"column":8},"action":"insert","lines":["s"]}],[{"start":{"row":70,"column":0},"end":{"row":71,"column":0},"action":"insert","lines":["",""],"id":155},{"start":{"row":71,"column":0},"end":{"row":71,"column":1},"action":"insert","lines":["d"]},{"start":{"row":71,"column":1},"end":{"row":71,"column":2},"action":"insert","lines":["e"]},{"start":{"row":71,"column":2},"end":{"row":71,"column":3},"action":"insert","lines":["f"]}],[{"start":{"row":71,"column":3},"end":{"row":71,"column":4},"action":"insert","lines":[" "],"id":156},{"start":{"row":71,"column":4},"end":{"row":71,"column":5},"action":"insert","lines":["c"]},{"start":{"row":71,"column":5},"end":{"row":71,"column":6},"action":"insert","lines":["h"]},{"start":{"row":71,"column":6},"end":{"row":71,"column":7},"action":"insert","lines":["e"]},{"start":{"row":71,"column":7},"end":{"row":71,"column":8},"action":"insert","lines":["c"]},{"start":{"row":71,"column":8},"end":{"row":71,"column":9},"action":"insert","lines":["k"]},{"start":{"row":71,"column":9},"end":{"row":71,"column":10},"action":"insert","lines":["_"]}],[{"start":{"row":71,"column":10},"end":{"row":71,"column":11},"action":"insert","lines":["p"],"id":157},{"start":{"row":71,"column":11},"end":{"row":71,"column":12},"action":"insert","lines":["n"]},{"start":{"row":71,"column":12},"end":{"row":71,"column":13},"action":"insert","lines":["l"]}],[{"start":{"row":71,"column":13},"end":{"row":71,"column":15},"action":"insert","lines":["()"],"id":158}],[{"start":{"row":71,"column":15},"end":{"row":71,"column":16},"action":"insert","lines":[":"],"id":159}],[{"start":{"row":72,"column":0},"end":{"row":72,"column":4},"action":"insert","lines":["    "],"id":160},{"start":{"row":73,"column":0},"end":{"row":73,"column":4},"action":"insert","lines":["    "]},{"start":{"row":74,"column":0},"end":{"row":74,"column":4},"action":"insert","lines":["    "]},{"start":{"row":75,"column":0},"end":{"row":75,"column":4},"action":"insert","lines":["    "]},{"start":{"row":76,"column":0},"end":{"row":76,"column":4},"action":"insert","lines":["    "]},{"start":{"row":77,"column":0},"end":{"row":77,"column":4},"action":"insert","lines":["    "]},{"start":{"row":78,"column":0},"end":{"row":78,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":0,"column":0},"end":{"row":81,"column":0},"action":"remove","lines":["from optibook.synchronous_client import Exchange","","import logging","logger = logging.getLogger('client')","logger.setLevel('ERROR')","","print(\"Setup was successful.\")","","ex = Exchange()","ex.connect()","","phil_a = 'PHILIPS_A'","phil_b = 'PHILIPS_B'","","# print(e.get_positions())","# for s, p in e.get_positions().items():","#     if p > 0:","#         e.insert_order(s, price=1, volume=p, side='ask', order_type='ioc')","#     elif p < 0:","#         e.insert_order(s, price=100000, volume=-p, side='bid', order_type='ioc')  ","# print(e.get_positions())","","","def buy_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","    ","","def sell_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","    ","print(\"hi\")","buy_a(7)","order = ex.get_trade_history(phil_a)","for i in order:","    print(f\"{i.order_id} \\t {i.price} \\t {i.volume} \\t {i.side}\")","","sell_a(4)","order = ex.get_trade_history(phil_a)","for i in order:","    print(f\"{i.order_id} \\t {i.price} \\t {i.volume} \\t {i.side}\")","","def check_pnl():","    pnl = ex.get_pnl()","    print(f'\\nPnL: {pnl:.2f}')","    ","    if pnl > 0:","        pass","    else:","        continue","","",""],"id":169},{"start":{"row":0,"column":0},"end":{"row":213,"column":0},"action":"insert","lines":["from datetime import datetime as dt","import time","import random ","import logging","from sklearn.linear_model import LinearRegression","import numpy as np","import pandas as pd","import matplotlib.pyplot as plt","import statsmodels.api as sm","","from optibook.synchronous_client import Exchange","","ex = Exchange()","ex.connect()","","phil_a = 'PHILIPS_A'","phil_b = 'PHILIPS_B'","","def buy_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","","def buy_b(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_b)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_b,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","","def sell_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","","def sell_b(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_b)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_b,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","    ","dfA = pd.DataFrame()","dfB = pd.DataFrame()","","dfA['Time'] = []","dfA['Price'] = []","dfA['Volume'] = []","dfA['Side'] = []","","dfB['Time'] = []","dfB['Price'] = []","dfB['Volume'] = []","dfB['Side'] = []","","print(\"--- \\t --- \\t --- \\t --- Team Traceback \\t --- \\t --- \\t --- \\t --- \\t\")","print(\"----------------------------------------------------------------\")","print(f\"Entering While Loop beginning now at {str(dt.now()):18s} UTC\")","print(\"----------------------------------------------------------------\")","print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","","phil_a = \"PHILIPS_A\"","phil_b = \"PHILIPS_B\"","","rsqRiskModelA = 0.500","rsqRiskModelB = 0.500","","while True:","    ","    time.sleep(10)","    try:","        orderA_book = ex.get_last_price_book(phil_a)","        orderB_book = ex.get_last_price_book(phil_b)","        ","        bidsA_prices = [i.price for i in orderA_book.bids]","        asksB_prices = [i.price for i in orderB_book.asks]","        ","        bidsA_vols = [i.volume for i in orderA_book.bids]","        asksB_vols = [i.volume for i in orderB_book.asks]","        ","        orderA_hist = ex.get_trade_tick_history(phil_a)","        orderB_hist = ex.get_trade_tick_history(phil_b)","        ","        timeA = [(i.timestamp.hour + i.timestamp.minute + i.timestamp.second) for i in orderA_hist]","        timeB = [(i.timestamp.hour + i.timestamp.minute + i.timestamp.second) for i in orderB_hist]","        ","        priceA = [i.price for i in orderA_hist]","        priceB = [i.price for i in orderB_hist]","        ","        volumeA = [i.volume for i in orderA_hist]","        volumeB = [i.volume for i in orderB_hist]","        ","        sideA = [i.aggressor_side for i in orderA_hist]","        sideB = [i.aggressor_side for i in orderB_hist]","        ","        dfAtemp = pd.DataFrame()","        dfAtemp['Time'] = timeA","        dfAtemp['Price'] = priceA","        dfAtemp['Volume'] = volumeA","        dfAtemp['Side'] = sideA","        ","        dfBtemp = pd.DataFrame()","        dfBtemp['Time'] = timeB","        dfBtemp['Price'] = priceB","        dfBtemp['Volume'] = volumeB","        dfBtemp['Side'] = sideB","        ","        pd.concat([dfA, dfAtemp], verify_integrity=True, axis=0)","        pd.concat([dfB, dfBtemp], verify_integrity=True, axis=0)","        ","        dfA.drop_duplicates()","        dfB.drop_duplicates()","        ","        Xa = dfA[['Time', 'Volume']]","        Xa = sm.add_constant(Xa)","        ya = dfA['Price']","        ","        Xb = dfB[['Time', 'Volume']]","        Xb = sm.add_constant(Xb)","        yb = dfB['Price']","        ","        print(dfA)","        print(dfB)","        print(dfAtemp)","        print(dfBtemp)","        ","        modelA = sm.OLS(ya, Xa).fit()","        modelB = sm.OLS(yb, Xb).fit()","        ","        rsqA = modelA.rsquared","        rsqB = modelB.rsquared","        ","        print(f\"R-Square for Model A = {rsqA}\")","        print(f\"R-Square for Model B = {rsqB}\")","        ","        predictA = lambda time, vol : modelA.params[0] + modelA.params[1]*time + modelA.params[2]*vol","        predictB = lambda time, vol : modelB.params[0] + modelB.params[1]*time + modelB.params[2]*vol","        ","        if rsqA < rsqRiskModelA or rsqB < rsqRiskModelB:","            continue","        else:","            ","            volXa = dfA[['Time', 'Price']]","            volXb = dfB[['Time', 'Price']]","            ","            volya = dfA['Volume']","            volyb = dfB['Volume']","            ","            volModelA = sm.OLS(volya, volXa).fit()","            volModelB = sm.OLS(volyb, volXb).fit()","            ","            volRsqA = volModelA.rsquared","            volRsqB = volModelB.rsquared","            ","            volPredictA = lambda time, price : modelA.params[0] + modelA.params[1]*time + modelA.params[2]*price","            volPredictB = lambda time, price : modelB.params[0] + modelB.params[1]*time + modelB.params[2]*price","            ","    except KeyboardInterrupt:","        print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","        print(\"------------------------------------------------------------------------------\")","        print(f\"Exiting While Loop due to KeyboardInterrupt at {str(dt.now()):18s} UTC\")","        print(\"------------------------------------------------------------------------------\")","        print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","        ","    ",""]}],[{"start":{"row":0,"column":0},"end":{"row":213,"column":0},"action":"remove","lines":["from datetime import datetime as dt","import time","import random ","import logging","from sklearn.linear_model import LinearRegression","import numpy as np","import pandas as pd","import matplotlib.pyplot as plt","import statsmodels.api as sm","","from optibook.synchronous_client import Exchange","","ex = Exchange()","ex.connect()","","phil_a = 'PHILIPS_A'","phil_b = 'PHILIPS_B'","","def buy_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","","def buy_b(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_b)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_b,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","","def sell_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","","def sell_b(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_b)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_b,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","    ","dfA = pd.DataFrame()","dfB = pd.DataFrame()","","dfA['Time'] = []","dfA['Price'] = []","dfA['Volume'] = []","dfA['Side'] = []","","dfB['Time'] = []","dfB['Price'] = []","dfB['Volume'] = []","dfB['Side'] = []","","print(\"--- \\t --- \\t --- \\t --- Team Traceback \\t --- \\t --- \\t --- \\t --- \\t\")","print(\"----------------------------------------------------------------\")","print(f\"Entering While Loop beginning now at {str(dt.now()):18s} UTC\")","print(\"----------------------------------------------------------------\")","print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","","phil_a = \"PHILIPS_A\"","phil_b = \"PHILIPS_B\"","","rsqRiskModelA = 0.500","rsqRiskModelB = 0.500","","while True:","    ","    time.sleep(10)","    try:","        orderA_book = ex.get_last_price_book(phil_a)","        orderB_book = ex.get_last_price_book(phil_b)","        ","        bidsA_prices = [i.price for i in orderA_book.bids]","        asksB_prices = [i.price for i in orderB_book.asks]","        ","        bidsA_vols = [i.volume for i in orderA_book.bids]","        asksB_vols = [i.volume for i in orderB_book.asks]","        ","        orderA_hist = ex.get_trade_tick_history(phil_a)","        orderB_hist = ex.get_trade_tick_history(phil_b)","        ","        timeA = [(i.timestamp.hour + i.timestamp.minute + i.timestamp.second) for i in orderA_hist]","        timeB = [(i.timestamp.hour + i.timestamp.minute + i.timestamp.second) for i in orderB_hist]","        ","        priceA = [i.price for i in orderA_hist]","        priceB = [i.price for i in orderB_hist]","        ","        volumeA = [i.volume for i in orderA_hist]","        volumeB = [i.volume for i in orderB_hist]","        ","        sideA = [i.aggressor_side for i in orderA_hist]","        sideB = [i.aggressor_side for i in orderB_hist]","        ","        dfAtemp = pd.DataFrame()","        dfAtemp['Time'] = timeA","        dfAtemp['Price'] = priceA","        dfAtemp['Volume'] = volumeA","        dfAtemp['Side'] = sideA","        ","        dfBtemp = pd.DataFrame()","        dfBtemp['Time'] = timeB","        dfBtemp['Price'] = priceB","        dfBtemp['Volume'] = volumeB","        dfBtemp['Side'] = sideB","        ","        pd.concat([dfA, dfAtemp], verify_integrity=True, axis=0)","        pd.concat([dfB, dfBtemp], verify_integrity=True, axis=0)","        ","        dfA.drop_duplicates()","        dfB.drop_duplicates()","        ","        Xa = dfA[['Time', 'Volume']]","        Xa = sm.add_constant(Xa)","        ya = dfA['Price']","        ","        Xb = dfB[['Time', 'Volume']]","        Xb = sm.add_constant(Xb)","        yb = dfB['Price']","        ","        print(dfA)","        print(dfB)","        print(dfAtemp)","        print(dfBtemp)","        ","        modelA = sm.OLS(ya, Xa).fit()","        modelB = sm.OLS(yb, Xb).fit()","        ","        rsqA = modelA.rsquared","        rsqB = modelB.rsquared","        ","        print(f\"R-Square for Model A = {rsqA}\")","        print(f\"R-Square for Model B = {rsqB}\")","        ","        predictA = lambda time, vol : modelA.params[0] + modelA.params[1]*time + modelA.params[2]*vol","        predictB = lambda time, vol : modelB.params[0] + modelB.params[1]*time + modelB.params[2]*vol","        ","        if rsqA < rsqRiskModelA or rsqB < rsqRiskModelB:","            continue","        else:","            ","            volXa = dfA[['Time', 'Price']]","            volXb = dfB[['Time', 'Price']]","            ","            volya = dfA['Volume']","            volyb = dfB['Volume']","            ","            volModelA = sm.OLS(volya, volXa).fit()","            volModelB = sm.OLS(volyb, volXb).fit()","            ","            volRsqA = volModelA.rsquared","            volRsqB = volModelB.rsquared","            ","            volPredictA = lambda time, price : modelA.params[0] + modelA.params[1]*time + modelA.params[2]*price","            volPredictB = lambda time, price : modelB.params[0] + modelB.params[1]*time + modelB.params[2]*price","            ","    except KeyboardInterrupt:","        print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","        print(\"------------------------------------------------------------------------------\")","        print(f\"Exiting While Loop due to KeyboardInterrupt at {str(dt.now()):18s} UTC\")","        print(\"------------------------------------------------------------------------------\")","        print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","        ","    ",""],"id":170},{"start":{"row":0,"column":0},"end":{"row":213,"column":0},"action":"insert","lines":["from datetime import datetime as dt","import time","import random ","import logging","from sklearn.linear_model import LinearRegression","import numpy as np","import pandas as pd","import matplotlib.pyplot as plt","import statsmodels.api as sm","","from optibook.synchronous_client import Exchange","","ex = Exchange()","ex.connect()","","phil_a = 'PHILIPS_A'","phil_b = 'PHILIPS_B'","","def buy_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","","def buy_b(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_b)","    min_price = 100000000","    for i in price_book.asks:","        if i.price < min_price:","            min_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_b,","        price = min_price,","        volume=order_size,","        side='bid',","        order_type='ioc',","    )","","def sell_a(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_a)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_a,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","","def sell_b(order_size:int):","    ","    # Checks the lowest priced option on the market for asks so that we can buy","    price_book = ex.get_last_price_book(phil_b)","    max_price = 100000000","    for i in price_book.bids:","        if i.price < max_price:","            max_price = i.price","    ","    # Places order for last-checked best price","    ex.insert_order(","        instrument_id=phil_b,","        price = max_price,","        volume=order_size,","        side='ask',","        order_type='ioc',","    )","    ","dfA = pd.DataFrame()","dfB = pd.DataFrame()","","dfA['Time'] = []","dfA['Price'] = []","dfA['Volume'] = []","dfA['Side'] = []","","dfB['Time'] = []","dfB['Price'] = []","dfB['Volume'] = []","dfB['Side'] = []","","print(\"--- \\t --- \\t --- \\t --- Team Traceback \\t --- \\t --- \\t --- \\t --- \\t\")","print(\"----------------------------------------------------------------\")","print(f\"Entering While Loop beginning now at {str(dt.now()):18s} UTC\")","print(\"----------------------------------------------------------------\")","print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","","phil_a = \"PHILIPS_A\"","phil_b = \"PHILIPS_B\"","","rsqRiskModelA = 0.500","rsqRiskModelB = 0.500","","while True:","    ","    time.sleep(10)","    try:","        orderA_book = ex.get_last_price_book(phil_a)","        orderB_book = ex.get_last_price_book(phil_b)","        ","        bidsA_prices = [i.price for i in orderA_book.bids]","        asksB_prices = [i.price for i in orderB_book.asks]","        ","        bidsA_vols = [i.volume for i in orderA_book.bids]","        asksB_vols = [i.volume for i in orderB_book.asks]","        ","        orderA_hist = ex.get_trade_tick_history(phil_a)","        orderB_hist = ex.get_trade_tick_history(phil_b)","        ","        timeA = [(i.timestamp.hour + i.timestamp.minute + i.timestamp.second) for i in orderA_hist]","        timeB = [(i.timestamp.hour + i.timestamp.minute + i.timestamp.second) for i in orderB_hist]","        ","        priceA = [i.price for i in orderA_hist]","        priceB = [i.price for i in orderB_hist]","        ","        volumeA = [i.volume for i in orderA_hist]","        volumeB = [i.volume for i in orderB_hist]","        ","        sideA = [i.aggressor_side for i in orderA_hist]","        sideB = [i.aggressor_side for i in orderB_hist]","        ","        dfAtemp = pd.DataFrame()","        dfAtemp['Time'] = timeA","        dfAtemp['Price'] = priceA","        dfAtemp['Volume'] = volumeA","        dfAtemp['Side'] = sideA","        ","        dfBtemp = pd.DataFrame()","        dfBtemp['Time'] = timeB","        dfBtemp['Price'] = priceB","        dfBtemp['Volume'] = volumeB","        dfBtemp['Side'] = sideB","        ","        dfA = pd.concat([dfA, dfAtemp], verify_integrity=True, axis=0)","        dfB = pd.concat([dfB, dfBtemp], verify_integrity=True, axis=0)","        ","        dfA.drop_duplicates()","        dfB.drop_duplicates()","        ","        Xa = dfA[['Time', 'Volume']]","        Xa = sm.add_constant(Xa)","        ya = dfA['Price']","        ","        Xb = dfB[['Time', 'Volume']]","        Xb = sm.add_constant(Xb)","        yb = dfB['Price']","        ","        print(dfA)","        print(dfB)","        print(dfAtemp)","        print(dfBtemp)","        ","        modelA = sm.OLS(ya, Xa).fit()","        modelB = sm.OLS(yb, Xb).fit()","        ","        rsqA = modelA.rsquared","        rsqB = modelB.rsquared","        ","        print(f\"R-Square for Model A = {rsqA}\")","        print(f\"R-Square for Model B = {rsqB}\")","        ","        predictA = lambda time, vol : modelA.params[0] + modelA.params[1]*time + modelA.params[2]*vol","        predictB = lambda time, vol : modelB.params[0] + modelB.params[1]*time + modelB.params[2]*vol","        ","        if rsqA < rsqRiskModelA or rsqB < rsqRiskModelB:","            continue","        else:","            ","            volXa = dfA[['Time', 'Price']]","            volXb = dfB[['Time', 'Price']]","            ","            volya = dfA['Volume']","            volyb = dfB['Volume']","            ","            volModelA = sm.OLS(volya, volXa).fit()","            volModelB = sm.OLS(volyb, volXb).fit()","            ","            volRsqA = volModelA.rsquared","            volRsqB = volModelB.rsquared","            ","            volPredictA = lambda time, price : modelA.params[0] + modelA.params[1]*time + modelA.params[2]*price","            volPredictB = lambda time, price : modelB.params[0] + modelB.params[1]*time + modelB.params[2]*price","            ","    except KeyboardInterrupt:","        print(\"--- \\t --- \\t --- \\t --- \\t --- Team Traceback \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","        print(\"------------------------------------------------------------------------------\")","        print(f\"Exiting While Loop due to KeyboardInterrupt at {str(dt.now()):18s} UTC\")","        print(\"------------------------------------------------------------------------------\")","        print(\"--- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t --- \\t\")","        ","    ",""]}]]},"ace":{"folds":[],"scrolltop":3092.5,"scrollleft":0,"selection":{"start":{"row":213,"column":0},"end":{"row":213,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":192,"state":"start","mode":"ace/mode/python"}},"timestamp":1642934718411,"hash":"0bca07340acafc325dd1f33a68b1698c4e506b18"}